
/*
 * DO NOT EDIT THIS FILE BY HAND!
 *
 * All changes will be lost when file gets regenerated.
 *
 * Generated by optgen 0.2 from config file "options.conf"
 *
 */

#ifndef OPTGEN_H
#define OPTGEN_H

#include <stdlib.h>

#define COUNT_OPTIONS 29

// nodb (--nodb) : do not generate database file
#define OPT_nodb 0

// path (-p,--path) ABSPATH : absolute path where scanning will start
#define OPT_path 1

// firstblocks (--firstblocks) N : max blocks to read in first hash pass
#define OPT_firstblocks 2

// firstblocksize (--firstblocksize) N : size of firstblocks to read
#define OPT_firstblocksize 3

// intblocks (--intblocks) N : blocks to read in intermediate hash
#define OPT_intblocks 4

// blocksize (--blocksize) N : size of regular blocks to read
#define OPT_blocksize 5

// skip_two (--skip-two) : do not compare two files directly
#define OPT_skip_two 6

// skip_three (--skip-three) : do not compare three files directly
#define OPT_skip_three 7

// file_count (--file-count) : max estimated number of files to scan
#define OPT_file_count 8

// avg_size (--avg-size) : estimated average file path length
#define OPT_avg_size 9

// uniques (--uniques) : save info about unique files
#define OPT_uniques 10

// stats_file (--stats-file) FILE : save stats to this file
#define OPT_stats_file 11

// minsize (-m,--minsize) SIZE : min size of files to scan
#define OPT_minsize 12

// pathsep (--pathsep) CHAR : change internal path separator to CHAR
#define OPT_pathsep 13

// hidden (--hidden) : include hidden files and dirs in scan
#define OPT_hidden 14

// no_thread_scan (--no-thread-scan) : do scan phase in a single thread
#define OPT_no_thread_scan 15

// cut (-c,--cut) PATHSEG : remove 'PATHSEG' from report paths
#define OPT_cut 16

// file (-f,--file) PATH : check this file
#define OPT_file 17

// exclude_path (-x,--exclude-path) PATH : ignore duplicates under this path
#define OPT_exclude_path 18

// link (-L,--link) : create symlinks for deleted files
#define OPT_link 19

// hardlink (-H,--hardlink) : create hard links for deleted files
#define OPT_hardlink 20

// verbose (-v,--verbose) : increase verbosity (may be repeated for more)
#define OPT_verbose 21

// verbose_threads (-V,--verbose-threads) : increase thread verbosity (may be repeated for more)
#define OPT_verbose_threads 22

// quiet (-q,--quiet) : quiet, supress all output except fatal errors
#define OPT_quiet 23

// db (-d,--db) PATH : path to dupd database file
#define OPT_db 24

// no_unique (--no-unique) : ignore unique table even if present
#define OPT_no_unique 25

// help (-h,--help) : show brief usage info
#define OPT_help 26

// x_small_buffers (--x-small-buffers) : for testing only, not useful otherwise
#define OPT_x_small_buffers 27

// testing (--testing) : for testing only, not useful otherwise
#define OPT_testing 28

// scan: scan starting from the given path
#define COMMAND_scan 1

// report: show duplicate report from last scan
#define COMMAND_report 2

// file: based on report, check for duplicates of one file
#define COMMAND_file 3

// uniques: based on report, look for unique files
#define COMMAND_uniques 4

// dups: based on report, look for duplicate files
#define COMMAND_dups 5

// ls: based on report, list info about every file seen
#define COMMAND_ls 6

// rmsh: create shell script to delete all duplicates
#define COMMAND_rmsh 7

// help: show brief usage info
#define COMMAND_help 8

// usage: show more extensive documentation
#define COMMAND_usage 9

// license: show license info
#define COMMAND_license 10

// version: show version and exit
#define COMMAND_version 11

// GLOBAL: 
#define COMMAND_GLOBAL 12

/**
 * Function to parse the arguments.
 *
 * Parameters:
 *   argc    - argv size (as passed to main)
 *   argv    - Arguments (as passed to main)
 *   command - Command (if present) will be stored here
 *   options - Caller-allocated array where option values will be stored
 *
 * Return:
 *   OPTGEN_OK on success
 *   OPTGEN_NONE if no arguments seen
 *   command will be set to OPTGEN_NO_COMMAND if no command given, or
 *     one of the COMMAND_* constants above.
 *   options array has an entry for each OPT_* index for each known option.
 *     The value of each OPT_* entry is one of:
 *       NULL if the option was not seen
 *       string value if the option had a value
 *       for options with no value, a string value of an integer
 *
 * Sample call:
 *
 *   char * options[COUNT_OPTIONS];
 *   int command;
 *
 *   int rv = optgen_parse(argc, argv, &command, options);
 *
 */
int optgen_parse(int argc, char * argv[], int * command, char * options[]);
#define OPTGEN_OK 0
#define OPTGEN_NONE 1
#define OPTGEN_NO_COMMAND -1

/**
 * Convenience function to get count of times an option was specified.
 * For options which take NO arguments but can be repeated multiple times,
 * this function returns the number of times it was seen
 *
 * Parameters:
 *   str - A value from options array
 *
 * Return:
 *
 *   Number of times an option was seen, or zero if none
 *
 */
int opt_count(char * str);

/**
 * Convenience function to return integer value of an option
 *
 * Parameters:
 *   str - A value from options array
 *   def - Default value if none given
 *
 * Return:
 *
 *   Value of option as integer. If NULL, returns default def.
 *
 */
int opt_int(char * str, int def);

/**
 * Convenience function to single char value of an option
 *
 * Parameters:
 *   str - A value from options array
 *   def - Default value if none given
 *
 * Return:
 *
 *   Value of option as char. If NULL, returns default def.
 *
 */
char opt_char(char * str, char def);

/**
 * Show help based on command and option descriptions.
 *
 */
void opt_show_help();

// Callbacks need to return one of these values
#define OPTGEN_CALLBACK_OK 0
#define OPTGEN_CALLBACK_FAIL 1

#endif
